
if you pass array as this way in a functional component
function App() {
  return (
    <div>
      <Navbar
        CompanyName="Test"
        LinksList={["Contact Us ", "About Us", "Home"]} --this
        Links={obj}
      />
    </div>
  );
}
export default App;
then u can map it via

{React.Children.toArray(
            props.LinksList.map((item, i) => (
              <li>
                <a className="nav-link" href="#" key={i}>
                  {item}
                </a>
              </li>
            ))
          )}


case two if array is list of dictionaries
example

const obj = [
  {
    name: "Home",
    href: "/home",
    icon: "fa fa-eye"
  },

  {
    name: "Contact us ",
    href: "/contactus",
    icon: "fa fa-eye"
  },

  {
    name: "About Us",
    href: "/aboutus",
    icon: "fa fa-eye"
  }
];

and is passed like this the
 <Navbar
        CompanyName="Test"
        LinksList={["Contact Us ", "About Us", "Home"]} --this
        Links={obj}
      />


you can map it via

 {props.Links.map(link => (
            <li className="nav-item ">
              <a className="nav-link" href={link.href} />
              <i className={link.icon} />
              {link.name}
            </li>
          ))}


 PURELY DNAMIC ROUTING
 const LinksList = [
  {
    Page_Name: "Home",
    Path: "/",
    Icon: "fa fa-eye",
    Img: "fa fa-eye",
    Class: "",
    Exact: true,
    Component_Name: Home,
    Id: 1,
  },
  {
    Page_Name: "Contact Us",
    Path: "/contact",
    Icon: "fa fa-eye",
    Img: "fa fa-eye",
    Class: "",
    Exact: false,
    Component_Name: Contact,
    Id: 2,
  },

  {
    Page_Name: "About ",
    Path: "/about",
    Icon: "fa fa-eye",
    Img: "fa fa-eye",
    Class: "",
    Exact: false,
    Component_Name: About,
    Id: 3,
  },
  {
    Page_Name: "FAQ",
    Path: "/faq",
    Icon: "fa fa-eye",
    Img: "fa fa-eye",
    Class: "",
    Exact: false,
    Component_Name: Faq,
    Id: 4,
  },

  {
    Page_Name: "Logout",
    Path: "/logout",
    Icon: "fa fa-eye",
    Img: "fa fa-eye",
    Class: "",
    Exact: false,
    Component_Name: Logout,
    Id: 6,
  },
];

MAAPING DYNAMIC ROUTES AND PASSING TO PROTECTED COMPONENT 

  {/* {React.Children.toArray(
              LinksList.map((link) => (
                <Route
                  path={link.Path}
                  exact={link.Exact}
                  key={link.Id}
                  // render={function () {return React.createElement(link.Component_Name)}}
                >
                  <Protected
                    updateloginStatus={this.updateloginStatus.bind(this)}
                    component={function () {
                      return React.createElement(link.Component_Name);
                    }}
                  />
                </Route>
              ))
            )} */}